// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart' show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:organista/config/config_controller.dart';
import 'dart:convert';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static Future<FirebaseOptions> get currentPlatform async {
    await Config.load();

    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for ios - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static FirebaseOptions get web {
    final firebaseConfig = jsonDecode(Config.get('firebase') ?? '{}');
    final webConfig = firebaseConfig['web'] ?? {};

    return FirebaseOptions(
      apiKey: webConfig['apiKey'] ?? '',
      appId: webConfig['appId'] ?? '',
      messagingSenderId: webConfig['messagingSenderId'] ?? '',
      projectId: webConfig['projectId'] ?? '',
      authDomain: webConfig['authDomain'] ?? '',
      storageBucket: webConfig['storageBucket'] ?? '',
    );
  }

  static FirebaseOptions get android {
    final firebaseConfig = jsonDecode(Config.get('firebase') ?? '{}');
    final androidConfig = firebaseConfig['android'] ?? {};

    return FirebaseOptions(
      apiKey: androidConfig['apiKey'] ?? '',
      appId: androidConfig['appId'] ?? '',
      messagingSenderId: androidConfig['messagingSenderId'] ?? '',
      projectId: androidConfig['projectId'] ?? '',
      storageBucket: androidConfig['storageBucket'] ?? '',
    );
  }
}
